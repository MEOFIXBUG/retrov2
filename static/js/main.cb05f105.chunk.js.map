{"version":3,"sources":["components/BoardItem.js","components/Boards.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","avatar","backgroundColor","red","expand","transform","marginLeft","transition","transitions","create","duration","shortest","BoardItem","props","classes","formatter","Intl","DateTimeFormat","year","month","day","Card","className","CardHeader","Avatar","aria-label","item","byName","slice","action","IconButton","subheader","format","Date","parse","createdAt","CardContent","Typography","variant","color","component","CardActions","disableSpacing","mine","cardGrid","paddingTop","spacing","paddingBottom","Boards","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","a","fetch","response","json","result","success","data","message","fetchData","Container","Grid","container","map","xs","sm","md","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb05f105.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { red } from '@material-ui/core/colors';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\nexport default function BoardItem(props) {\r\n    const classes = useStyles();\r\n    let formatter = new Intl.DateTimeFormat(\"en-GB\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"2-digit\"\r\n    });\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                        {props.item.byName.slice(0, 1)}\r\n                    </Avatar>\r\n                }\r\n                action={\r\n                    <IconButton aria-label=\"remove\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                }\r\n                subheader={formatter.format(Date.parse(props.item.createdAt))}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"title\" color=\"textSecondary\" component=\"h2\">\r\n                    {props.item.byName}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n\r\n                {props.item.mine ?\r\n                    <>\r\n                        <IconButton aria-label=\"publish\">\r\n                            <PublishIcon />\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"share\">\r\n                            <ShareIcon />\r\n                        </IconButton>\r\n                    </> :\r\n                    <IconButton\r\n                            className={classes.expand}\r\n                        >\r\n                        <ShareIcon color=\"primary\" />\r\n                    </IconButton>}\r\n\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport BoardItem from './BoardItem';\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    }\r\n}));\r\n\r\nexport default function Boards() {\r\n    const classes = useStyles();\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            // You can await here\r\n            const response = await fetch('https://retrov8.herokuapp.com/api/boards');\r\n            const result = await response.json();\r\n            if (result.success) {\r\n                setIsLoaded(true);\r\n                setItems(result.data);\r\n            }\r\n            else {\r\n                setIsLoaded(true);\r\n                setError(result.message);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []); // Or [] if effect doesn't need props or state\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        return (\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {/* End hero unit */}\r\n                <Grid container spacing={4}>\r\n                    {items.map((item) => (\r\n                        <Grid item key={item.id} xs={12} sm={6} md={4}>\r\n                            <BoardItem item={item}></BoardItem>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\nimport Boards from './components/Boards';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Boards></Boards>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}